// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace AsteraX
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DataLevel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static DataLevel GetRootAsDataLevel(ByteBuffer _bb) { return GetRootAsDataLevel(_bb, new DataLevel()); }
  public static DataLevel GetRootAsDataLevel(ByteBuffer _bb, DataLevel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DataLevel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public AsteraX.LevelDataObject? Data(int j) { int o = __p.__offset(4); return o != 0 ? (AsteraX.LevelDataObject?)(new AsteraX.LevelDataObject()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<AsteraX.DataLevel> CreateDataLevel(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    DataLevel.AddData(builder, dataOffset);
    return DataLevel.EndDataLevel(builder);
  }

  public static void StartDataLevel(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<AsteraX.LevelDataObject>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<AsteraX.LevelDataObject>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AsteraX.DataLevel> EndDataLevel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AsteraX.DataLevel>(o);
  }
  public static void FinishDataLevelBuffer(FlatBufferBuilder builder, Offset<AsteraX.DataLevel> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedDataLevelBuffer(FlatBufferBuilder builder, Offset<AsteraX.DataLevel> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
