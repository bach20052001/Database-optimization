// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace AsteraX
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct LevelDataObject : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static LevelDataObject GetRootAsLevelDataObject(ByteBuffer _bb) { return GetRootAsLevelDataObject(_bb, new LevelDataObject()); }
  public static LevelDataObject GetRootAsLevelDataObject(ByteBuffer _bb, LevelDataObject obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LevelDataObject __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Levelindex { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Minvelocity { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Maxvelocity { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Maxangularvelocity { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public AsteraX.NumberAsteroidData? Listasteroid(int j) { int o = __p.__offset(12); return o != 0 ? (AsteraX.NumberAsteroidData?)(new AsteraX.NumberAsteroidData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ListasteroidLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool Hasboss { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public short Bosstype { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }

  public static Offset<AsteraX.LevelDataObject> CreateLevelDataObject(FlatBufferBuilder builder,
      int levelindex = 0,
      float minvelocity = 0.0f,
      float maxvelocity = 0.0f,
      float maxangularvelocity = 0.0f,
      VectorOffset listasteroidOffset = default(VectorOffset),
      bool hasboss = false,
      short bosstype = 0) {
    builder.StartTable(7);
    LevelDataObject.AddListasteroid(builder, listasteroidOffset);
    LevelDataObject.AddMaxangularvelocity(builder, maxangularvelocity);
    LevelDataObject.AddMaxvelocity(builder, maxvelocity);
    LevelDataObject.AddMinvelocity(builder, minvelocity);
    LevelDataObject.AddLevelindex(builder, levelindex);
    LevelDataObject.AddBosstype(builder, bosstype);
    LevelDataObject.AddHasboss(builder, hasboss);
    return LevelDataObject.EndLevelDataObject(builder);
  }

  public static void StartLevelDataObject(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddLevelindex(FlatBufferBuilder builder, int levelindex) { builder.AddInt(0, levelindex, 0); }
  public static void AddMinvelocity(FlatBufferBuilder builder, float minvelocity) { builder.AddFloat(1, minvelocity, 0.0f); }
  public static void AddMaxvelocity(FlatBufferBuilder builder, float maxvelocity) { builder.AddFloat(2, maxvelocity, 0.0f); }
  public static void AddMaxangularvelocity(FlatBufferBuilder builder, float maxangularvelocity) { builder.AddFloat(3, maxangularvelocity, 0.0f); }
  public static void AddListasteroid(FlatBufferBuilder builder, VectorOffset listasteroidOffset) { builder.AddOffset(4, listasteroidOffset.Value, 0); }
  public static VectorOffset CreateListasteroidVector(FlatBufferBuilder builder, Offset<AsteraX.NumberAsteroidData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateListasteroidVectorBlock(FlatBufferBuilder builder, Offset<AsteraX.NumberAsteroidData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartListasteroidVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddHasboss(FlatBufferBuilder builder, bool hasboss) { builder.AddBool(5, hasboss, false); }
  public static void AddBosstype(FlatBufferBuilder builder, short bosstype) { builder.AddShort(6, bosstype, 0); }
  public static Offset<AsteraX.LevelDataObject> EndLevelDataObject(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AsteraX.LevelDataObject>(o);
  }
};


}
