// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace AsteraX
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct NumberAsteroidData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static NumberAsteroidData GetRootAsNumberAsteroidData(ByteBuffer _bb) { return GetRootAsNumberAsteroidData(_bb, new NumberAsteroidData()); }
  public static NumberAsteroidData GetRootAsNumberAsteroidData(ByteBuffer _bb, NumberAsteroidData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public NumberAsteroidData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short Type { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public short Number { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }

  public static Offset<AsteraX.NumberAsteroidData> CreateNumberAsteroidData(FlatBufferBuilder builder,
      short type = 0,
      short number = 0) {
    builder.StartTable(2);
    NumberAsteroidData.AddNumber(builder, number);
    NumberAsteroidData.AddType(builder, type);
    return NumberAsteroidData.EndNumberAsteroidData(builder);
  }

  public static void StartNumberAsteroidData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddType(FlatBufferBuilder builder, short type) { builder.AddShort(0, type, 0); }
  public static void AddNumber(FlatBufferBuilder builder, short number) { builder.AddShort(1, number, 0); }
  public static Offset<AsteraX.NumberAsteroidData> EndNumberAsteroidData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AsteraX.NumberAsteroidData>(o);
  }
};


}
